CREATE  DATABASE Grocery_Store_Management;
USE Grocery_Store_Management;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);


select * from supplier;

select * from categories;

select * from employees;

select * from customers;

select * from products;

select * from orders;

select * from order_details;


-- 1️) Customer Insights
-- Gain an understanding of customer engagement and purchasing behavior.
-- 1. How many unique customers have placed orders?
SELECT COUNT(DISTINCT cust_id) AS unique_customers
FROM orders;

-- 2. Which customers have placed the highest number of orders?
SELECT c.cust_id, 
       c.cust_name, 
       COUNT(o.ord_id) AS total_orders
FROM customers c
JOIN orders o 
     ON c.cust_id = o.cust_id
GROUP BY c.cust_id, c.cust_name
ORDER BY total_orders DESC
LIMIT 1;

-- 3. What is the total and average purchase value per customer?
SELECT c.cust_id, c.cust_name, 
       SUM(od.total_price) AS total_purchase,
       AVG(od.total_price) AS avg_purchase
FROM customers c
JOIN orders o ON c.cust_id = o.cust_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_id, c.cust_name
ORDER BY total_purchase DESC;

-- 4 Who are the top 5 customers by total purchase amount?
SELECT c.cust_id, c.cust_name, 
       SUM(od.total_price) AS total_purchase
FROM customers c
JOIN orders o ON c.cust_id = o.cust_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_id, c.cust_name
ORDER BY total_purchase DESC
LIMIT 5;

-- 2) Product Performance
-- * Evaluate how well products are performing in terms of sales and revenue.
-- 5. How many products exist in each category?
SELECT c.cat_id, c.cat_name, COUNT(p.prod_id) AS product_count
FROM categories c
LEFT JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id, c.cat_name;

-- 6. What is the average price of products by category?
SELECT c.cat_id, c.cat_name, ROUND(AVG(p.price), 2) AS avg_price
FROM categories c
JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id, c.cat_name;

-- 7. Which products have the highest total sales volume (by quantity)?
SELECT p.prod_id, p.prod_name, SUM(od.quantity) AS total_quantity_sold
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY total_quantity_sold DESC
LIMIT 1;

-- 8. What is the total revenue generated by each product?
SELECT  SUM(OD.TOTAL_PRICE) AS TOTAL_REVENUE,P.PROD_NAME FROM ORDER_DETAILS OD
 LEFT JOIN PRODUCTS P
ON P.PROD_ID=OD.PROD_ID
GROUP BY PROD_NAME;

-- 9. How do product sales vary by category and supplier?
SELECT c.cat_name, s.sup_name, 
       SUM(od.quantity) AS total_quantity_sold,
       SUM(od.total_price) AS total_revenue
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
JOIN categories c ON p.cat_id = c.cat_id
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY c.cat_name, s.sup_name
ORDER BY c.cat_name, total_revenue DESC;


-- 3) Sales and Order Trends
-- Analyze business performance through orders and revenue over time.
-- 10. How many orders have been placed in total?
SELECT COUNT(*) AS TOTAL_ORDERS FROM ORDERS;

-- 11. What is the average value per order?
SELECT 
   SUM(TOTAL_PRICE)/COUNT(DISTINCT ORD_ID) AS AVG_ORDER_VALUE
     FROM ORDER_DETAILS;

-- 12. On which dates were the most orders placed?
SELECT order_date, COUNT(ord_id) AS orders_count
FROM orders
GROUP BY order_date
ORDER BY orders_count DESC
LIMIT 1;

-- 13. What are the monthly trends in order volume and revenue?
SELECT 
  LEFT(O.ORDER_DATE,7) AS ORDER_MONTH,
  COUNT(DISTINCT O.ORD_ID) AS ORDER_VOLUME,
  SUM(OD.TOTAL_PRICE) AS TOTAL_REVENUE
FROM ORDERS O 
JOIN ORDER_DETAILS OD ON O.ORD_ID=OD.ORD_ID
GROUP BY ORDER_MONTH
ORDER BY ORDER_MONTH;

-- 14. How do order patterns vary across weekdays and weekends?
-- Convert order_date into DATE format (only once)
UPDATE orders
SET order_date = STR_TO_DATE(order_date, '%c/%d/%Y')
WHERE order_date LIKE '%/%/%';

-- Query: weekday + month with total orders, sorted by total_orders desc
SELECT 
    DAYNAME(order_date) AS weekday,
    MONTHNAME(order_date) AS month,
    COUNT(ord_id) AS total_orders
FROM orders
GROUP BY weekday, month
ORDER BY total_orders DESC;

-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.
-- 15. How many suppliers are there in the database?
SELECT COUNT(*) FROM SUPPLIER;

-- 16. Which supplier provides the most products?
SELECT S.SUP_ID, S.SUP_NAME, COUNT(*) AS product_count
FROM PRODUCTS P
JOIN SUPPLIER S ON S.SUP_ID = P.SUP_ID
GROUP BY S.SUP_ID
ORDER BY product_count DESC
LIMIT 1;

-- 17. What is the average price of products from each supplier?
SELECT S.SUP_NAME,S.SUP_ID, AVG(P.PRICE) 
 FROM PRODUCTS P 
JOIN SUPPLIER S ON
P.SUP_ID=S.SUP_ID
GROUP BY S.SUP_ID;

-- 18. Which suppliers contribute the most to total product sales (by revenue)?
SELECT 
 S.SUP_ID,S.SUP_NAME,SUM(OD.TOTAL_PRICE) AS TOTAL_REVENUE
 FROM SUPPLIER S 
JOIN PRODUCTS P 
ON S.SUP_ID=P.SUP_ID
JOIN 
ORDER_DETAILS OD ON P.PROD_ID=OD.PROD_ID
GROUP BY S.SUP_ID
ORDER BY TOTAL_REVENUE DESC
LIMIT 1;

-- 5. Employee Performance
-- Assess how employees are handling and influencing sales.
-- 19. How many employees have processed orders?
SELECT COUNT( DISTINCT EMP_ID) FROM ORDERS;

-- 20. Which employees have handled the most orders?
SELECT E.EMP_ID, E.EMP_NAME, COUNT(O.ORD_ID) AS TOTAL_ORDERS
FROM EMPLOYEES E
JOIN ORDERS O ON O.EMP_ID = E.EMP_ID
GROUP BY E.EMP_ID, E.EMP_NAME
ORDER BY TOTAL_ORDERS DESC
LIMIT 1; 

-- 21. What is the total sales value processed by each employee?
SELECT E.EMP_ID, E.EMP_NAME, SUM(OD.total_price) AS TOTAL_SALES
FROM EMPLOYEES E
JOIN ORDERS O ON E.EMP_ID = O.EMP_ID
JOIN ORDER_DETAILS OD ON O.ORD_ID = OD.ORD_ID
GROUP BY E.EMP_ID, E.EMP_NAME
ORDER BY TOTAL_SALES DESC;

-- 22. What is the average order value handled per employee?
SELECT E.EMP_ID,E.EMP_NAME,
    SUM(OD.total_price)/COUNT(DISTINCT O.ORD_ID)AS AVG_ORDER
FROM EMPLOYEES E
JOIN ORDERS O ON E.EMP_ID = O.EMP_ID
JOIN ORDER_DETAILS OD ON O.ORD_ID = OD.ORD_ID
GROUP BY E.EMP_ID;

-- 6️) Order Details Deep Dive
-- Explore item-level sales patterns and pricing behavior.
-- 23. What is the relationship between quantity ordered and total price?
SELECT QUANTITY,
    AVG(total_price) AS avg_price,
    SUM(total_price) AS total_price_sum
FROM ORDER_DETAILS
GROUP BY QUANTITY
ORDER BY QUANTITY;

-- 24. What is the average quantity ordered per product?
SELECT P.PROD_ID,P.PROD_NAME,
AVG(OD.QUANTITY) AS AVG_QUANTITY_ORDERED ,
COUNT(OD.ORD_ID) AS TOTAL_ORDERS
FROM ORDER_DETAILS OD
JOIN PRODUCTS P ON
P.PROD_ID=OD.PROD_ID
GROUP BY P.PROD_ID
ORDER BY  AVG_QUANTITY_ORDERED DESC;

-- 25.How does the unit price vary across products and orders?
SELECT p.prod_id, p.prod_name, od.each_price AS unit_price,
    COUNT(od.ord_id) AS times_ordered
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name, od.each_price
ORDER BY p.prod_id;
